{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Swedenborg Concordance",
	"patterns": [
		{
			"include": "#invalid"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#references"
		},
		{
			"include": "#principal_phrases"
		},
		{
			"include": "#latin_injected"
		},
		{
			"include": "#styles"
		}

	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.problem.swconcord",
					"match": "(?i)(# *problem)( .*)",
					"captures": {
						"1": {
							"name": "comment.problem.keyword.swconcord"
						},
						"2": {
							"name": "comment.problem.description.swconcord"
						}
					}
				},
				{
					"name": "comment.control.swconcord",
					"match": "#.*"
				}
			]
		},
		"references": {
			"patterns": [
				{
					"comment": "Highlight differently from other abbreviations to indicate it shouldn't be modified",
					"name": "ref.canonsnc.swconcord",
					"match": "@CanonsNC"
				},
				{
					"name": "ref.abbrev.swconcord",
					"match": "@(--|((\\d\\/)?\\d+[ab]?(-\\d+)?)|(5M|9Q|AC|AE|AngIdea|AR|Ath|BE|CL|CanonsNC|Char|ConvAng|Coro|DFaith|DLW|DLife|DLord|DLove|DMin|DP|DSS|DWis|DeConj|DeConsum|DeDeoSalv|DeDomino|DeInfluxus|DeJust|DeMiraculis|DeVerbo|Dicta Probantia|Docu|EU|EccHist|HH|HistCrea|ISB|Inv|LJCont|LJPost|LJ|Letters|NJHD|PP|SE|SciaDoc|TCR|Adversaria|WHApp|WH) ((\\d\\/)?\\d+[ab]?(-\\d+)?))(\\[(\\d+|end|quarter|third|half)\\])?(\\([a-z]{1,2}\\))?( |\\.|,|\\))"
				},
				{
					"name": "bible.ref.swconcord",
					"match": "(1 Chronicles|1 Corinthians|1 Esdras|1 John|1 Kings|1 Maccabees|1 Peter|1 Samuel|1 Thessalonians|1 Timothy|2 Chronicles|2 Corinthians|2 Esdras|2 John|2 Kings|2 Peter|2 Samuel|2 Thessalonians|2 Timothy|3 John|Acts|Amos|Colossians|Daniel|Deuteronomy|Ecclesiastes|Ecclesiasticus|Ephesians|Esther|Exodus|Ezekiel|Ezra|Galatians|Genesis|Habakkuk|Haggai|Hebrews|Hosea|Isaiah|James|Jeremiah|Job|Joel|John|Jonah|Joshua|Jude|Judges|Judith|Lamentations|Leviticus|Luke|Malachi|Mark|Matthew|Micah|Nahum|Nehemiah|Numbers|Obadiah|Odes|Philemon|Philippians|Proverbs|Psalms|Revelation|Romans|Ruth|Song of Solomon|Titus|Zechariah|Zephaniah)( \\d+(:\\d+(-(\\d+|end))?(, \\d+(-(\\d+|end))?)*)?(; \\d+(:\\d+(-(\\d+|end))?(, \\d+(-(\\d+|end))?)*)?)*)?"
				},
				{
					"name": "xref.swconcord",
					"match": "<(([A-Z]([A-Za-z]|-[A-Za-z])*|\"[A-Z]([A-Za-z \\-'()]|, )+\")(-([A-Za-z]([A-Za-z]|-[A-Za-z])*|\"[A-Za-z]([A-Za-z \\-'()]|, )+\"))?)>"
				}
			]
		},
		"principal_phrases": {
			"patterns": [
				{
					"name": "xref.sentence.swconcord",
					"comment": "See grammar/regex/xref-expression.py in repository swconcord-process which creates this regex from a template",
					"match": "(See|Under|Continued) [a-z,; ()]*((([A-Z]([A-Za-z]|-[A-Za-z])*|\"[A-Z]([A-Za-z \\-'()]|, )+\")(-([A-Za-z]([A-Za-z]|-[A-Za-z])*|\"[A-Za-z]([A-Za-z \\-'()]|, )+\"))?)[,; ][a-z,; ()]* )*(([A-Z]([A-Za-z]|-[A-Za-z])*|\"[A-Z]([A-Za-z \\-'()]|, )+\")(-([A-Za-z]([A-Za-z]|-[A-Za-z])*|\"[A-Za-z]([A-Za-z \\-'()]|, )+\"))?)[a-z,; ()]*[@.]"
				},
				{
					"name": "principal.phrases.swconcord",
					"match": "^(?!(See|Under|Continued) )([A-Z]+([A-Za-z]| |'|,|-|\\(|\\))*)[.!](( (?!(See|Under|Continued|The))([A-Z]+([A-Za-z]| |'|,|-|\\(|\\))*)[.!])*)",
					"captures": {
						"2": {
							"name": "principal_phrase.english.swconcord"
						},
						"4": {
							"name": "principal_phrase.latin.swconcord"
						}
					}
				}
			]
		},
		"latin_injected": {
			"patterns": [
				{
					"name": "latin.injected.region.swconcord",
					"comment": "This should match LatinInjectionsMarker.LATIN_INJECT_REGEX in repository swconcord-process file language.py except a space should be added after first ([A-Za-z]+)",
					"match": "[ '(]([A-Za-z]+) -((([A-Za-z]+ )*[A-Za-z]+)(( ?- ?[A-Za-z]+)|[.?,;')]))",
					"captures": {
						"3": {
							"name": "latin.injected.swconcord"
						}
					}
				}
			]
		},
		"styles": {
			"patterns": [
				{
					"name": "style.emphasis.swconcord",
					"match": "_.*?_"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"name": "invalid.line.beginning.unexpected.swconcord",
					"match": "^[^@A-Z#].*$"
				},
				{
					"name": "invalid.char.unexpected.after.at.sign.swconcord",
					"match": "@(?!\\w|-)"
				},
				{
					"name": "invalid.ref.malformed.swconcord",
					"match": "@(?!(--|(\\d\\/)?\\d+[ab]?(-\\d+[ab]?)?|(5M|9Q|AC|AE|AngIdea|AR|Ath|BE|CL|CanonsNC|Char|ConvAng|Coro|DFaith|DLW|DLife|DLord|DLove|DMin|DP|DSS|DWis|DeConj|DeConsum|DeDeoSalv|DeDomino|DeInfluxus|DeJust|DeMiraculis|DeVerbo|Dicta Probantia|Docu|EU|EccHist|HH|HistCrea|ISB|Inv|LJCont|LJPost|LJ|Letters|NJHD|PP|SE|SciaDoc|TCR|Adversaria|WHApp|WH) ((\\d\\/)?\\d+[ab]?(-\\d+)?))(\\[(\\d+|end|quarter|third|half)\\])?(\\([a-z]{1,2}\\))?[., )]).*? "
				},
				{
					"name": "invalid.work.reference.without.at.sign.swconcord",
					"match": "(?<!@|[A-Z])(5M|9Q|AC|AE|AngIdea|AR|Ath|BE|CL|CanonsNC|Char|ConvAng|Coro|DFaith|DLW|DLife|DLord|DLove|DMin|DP|DSS|DWis|DeConj|DeConsum|DeDeoSalv|DeDomino|DeInfluxus|DeJust|DeMiraculis|DeVerbo|Dicta Probantia|Docu|EU|EccHist|HH|HistCrea|ISB|Inv|LJCont|LJPost|LJ|Letters|NJHD|PP|SE|SciaDoc|TCR|Adversaria|WHApp|WH) \\d"
				},
				{
					"name": "invalid.section.reference.without.at.sign.swconcord",
					"match": "\\. \\d+\\["
				},
				{
					"name": "invalid.subsection.too.large.swconcord",
					"match": "\\[\\d{3}\\]"
				},
				{
					"name": "invalid.xref.malformed.swconcord",
					"match": "<(?!(([A-Z]([A-Za-z]|-[A-Za-z])*|\"[A-Z]([A-Za-z \\-'()]|, )+\")(-([A-Za-z]([A-Za-z]|-[A-Za-z])*|\"[A-Za-z]([A-Za-z \\-'()]|, )+\"))?)>).*?[ ,.;\\n]"
				},
				{
					"name": "xref.sentence.principal.phrase.with.two.capital.words.not.quoted",
					"match": "([^']See )([^)@]*?)(?!(See|\"))([A-Z]\\w+ (of )?[A-Z]\\w+)([\\.,])"
				},
				{
					"name": "invalid.xref.sentence.first.principal.phrase.not.quoted.swconcord",
					"match": "(See )([A-Z]\\w+)( (?!here)\\w+)([\\.,])"
				},
				{
					"name": "invalid.non.digit.before.digit.swconcord",
					"match": "[^ @\\d:\\-,'\\/\\(\\[]\\d+"
				},
				{
					"name": "invalid.non.digit.after.digit.swconcord",
					"match": "(?!(5M|9Q|2Kings))\\d(?!(st|nd|th|rd|\\d|a|b|\\.|:|;|,| |\\/|\\(|-|'|\\[|\\]|\\)))"
				},
				{
					"name": "invalid.double.dash.unexpected.swconcord",
					"match": "[^@]--"
				},
				{
					"name": "invalid.bible.verse.ref.malformed.swconcord",
					"match": "\\(verse (?!\\d+\\)).*?\\)"
				},
				{
					"name": "invalid.psalms.ref.swconcord",
					"match": "Psalm (\\d+)"
				},
				{
					"name": "invalid.missing.latin.principal.phrase.swconcord",
					"match": "^(?!(See|Under|Continued))(([A-Za-z]| |'|,|-|\\(|\\))*)\\. *$"
				},
				{
					"name": "invalid.char.unknown.swconcord",
					"match": "%"
				},
				{
					"name": "invalid.one.letter.abbrev.not.converted.swconcord",
					"match": "\\. [DEPW]\\."
				},
				{
					"name": "invalid.lowercase.letter.unexpected.swconcord",
					"match": "(?<!(?:\\.\\.|ig|tc|\\.e))\\. (?!etc)[a-z]"
				},
				{
					"name": "invalid.space.between.chars.unexpected.swconcord",
					"match": "[\\.!:\\-\\(] +[\\.!:\\)]"
				},
				{
					"name": "invalid.adjacent.chars.unexpected.swconcord",
					"match": "[!:\\-\\(][!:\\)]"
				},
				{
					"name": "invalid.equals.sign.not.between.spaces.swconcord",
					"match": "[^ (]=|=[^ ]"
				},
				{
					"name": "invalid.char.unexpected.swconcord",
					"match": "[\\)?!;*]\\w"
				},
				{
					"name": "invalid.letter.after.period.swconcord",
					"match": "(?<!i)\\.[A-Za-z]"
				},
				{
					"name": "invalid.stray.char.swconcord",
					"match": "\\s[b-z|\\?|,|:|;|\\.|!|'|\\*]\\s"
				},
				{
					"name": "invalid.word.case.unexpected.swconcord",
					"match": "\\s([A-Z]+[a-z]+[A-Z]+|[a-z]+[A-Z])"
				},
				{
					"name": "invalid.extra.character.swconcord",
					"match": "(,{2,}|;{2,}|:{2,}|\\/{2,}|\\?{2,}|!{2,}|-{3,}|={2,}|\\({2,}|\\){2,}|_{2,}|'{2,}|\"{2,}|\\s{2,})| +$"
				},
				{
					"name": "invalid.parenthesis.bracket.missing",
					"match": "\\([^)]*$|^[^(]*\\)"
				},
				{
					"name": "invalid.matching.quote.missing",
					"match": "^([^']*'[^']|[^']*'[^']{3}|[^']*'[^']{5})$"
				},
				{
					"name": "invalid.general.article.swconcord",
					"match": "\\(General article\\.?\\)"
				}
			]
		}
	},
	"scopeName": "source.swconcord"
}